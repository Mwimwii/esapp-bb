const tablemark = require("tablemark");
const dateHeader = `
   Do not edit directly.
   Edit properties in ./design-tokens/properties/
   ---
   Generated by style-dictionary on ${new Date()}
`;

// Mostly stolen from https://github.com/amzn/style-dictionary/blob/c34cfa5313ee69f02783a2fb51d5f78720163d53/lib/common/formats.js#L73
const minifyDictionary = (obj) => {
    let toRet = {};

    if (obj.hasOwnProperty('value')) {
        return obj.value;
    } else {
        for(const name in obj) {
          if(obj.hasOwnProperty(name) && Object.keys(obj[name]).length > 1) {
            toRet[name] = minifyDictionary(obj[name])
          }
        }
    }
    return toRet;
};

const generateTailwindTokenObj = (dictionary) => {
  const color = dictionary.allProperties
      // just get the color properties
      .filter((property) =>
        property.attributes.category === "color"
      )
      // use the "name" property of each color as a key
      .reduce((acc, curr) => {
        acc[curr.name] = curr.value;
        return acc;
      }, {});

  // we get these from the `color` constant defined above,
  // so we should delete them
  delete dictionary.properties.color;

  return {
    color,
    ...minifyDictionary(dictionary.properties)
  };
};

const getSwatch = prop => {
  if (prop.attributes.category === "color") {
    return {
      Swatch: /^#([0-9A-F]{3}){1,2}$/i.test(prop.value)
        ? `![${
            prop.name
          } color swatch](https://via.placeholder.com/100x33/${prop.value.substr(
            1
          )}/000000?text=+)`
        : "N/A" // TODO: handle non-hex values by converting them
    };
  }
  // TODO: use something like https://onlinetexttools.com/convert-text-to-image to
  // make image swatches for typography tokens

  return {};
};

const getMarkdownTable = properties =>
  tablemark(
    properties.map(prop => ({
      ...getSwatch(prop),
      "Token Name": prop.name,
      Value: prop.value,
    }))
  );

const getMarkdownTablesByType = (dictionary, typeDisplayNameMap) => {
  const unMappedTypes = dictionary.allProperties.filter(
    prop => !Object.keys(typeDisplayNameMap).includes(prop.attributes.type)
  );

  const layoutTokensByType = {
    ...Object.keys(typeDisplayNameMap).reduce((acc, type) => {
      const typeDisplayName = typeDisplayNameMap[type];

      acc[typeDisplayName] = dictionary.allProperties.filter(
        prop => prop.attributes.type === type
      );

      return acc;
    }, {}),
    ...(unMappedTypes.length ? { Other: unMappedTypes } : {})
  };

  return `<!--\n${dateHeader}\n-->\n${Object.keys(layoutTokensByType)
    .map(type => `## ${type}\n\n${getMarkdownTable(layoutTokensByType[type])}`)
    .join("\n---\n\n")}`;
};

module.exports = {dateHeader, getMarkdownTablesByType, generateTailwindTokenObj};